
> meeton-backend@1.0.0 dev
> ts-node-dev --respawn --transpile-only src/index.ts

[INFO] 12:51:45 ts-node-dev ver. 2.0.0 (using ts-node ver. 10.9.2, typescript ver. 5.8.3)
✅ Environment variables validated successfully
📁 Events routes file loaded
TypeError: argument handler must be a function
    at Route.<computed> [as post] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:228:15)
    at Function.Router.<computed> [as post] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:448:19)
    at Object.<anonymous> (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts:36:8)
    at Module.<anonymous> (node:internal/modules/cjs/loader:1554:14)
    at Module._compile (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/source-map-support/source-map-support.js:568:25)
    at Module.m._compile (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:69:33)
    at node:internal/modules/cjs/loader:1706:10
    at require.extensions..jsx.require.extensions..js (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:114:20)
    at require.extensions.<computed> (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:71:20)
    at Object.nodeDevHook [as .ts] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/ts-node-dev/lib/hook.js:63:13)
[ERROR] 12:51:46 TypeError: argument handler must be a function
[INFO] 12:52:03 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts has been modified
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
TypeError: argument handler must be a function
    at Route.<computed> [as post] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:228:15)
    at Function.Router.<computed> [as post] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:448:19)
    at Object.<anonymous> (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts:38:8)
    at Module.<anonymous> (node:internal/modules/cjs/loader:1554:14)
    at Module._compile (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/source-map-support/source-map-support.js:568:25)
    at Module.m._compile (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:69:33)
    at node:internal/modules/cjs/loader:1706:10
    at require.extensions..jsx.require.extensions..js (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:114:20)
    at require.extensions.<computed> (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:71:20)
    at Object.nodeDevHook [as .ts] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/ts-node-dev/lib/hook.js:63:13)
[ERROR] 12:52:04 TypeError: argument handler must be a function
[INFO] 12:52:35 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts has been modified
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
TypeError: argument handler must be a function
    at Route.<computed> [as get] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:228:15)
    at Function.Router.<computed> [as get] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:448:19)
    at Object.<anonymous> (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts:55:8)
    at Module.<anonymous> (node:internal/modules/cjs/loader:1554:14)
    at Module._compile (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/source-map-support/source-map-support.js:568:25)
    at Module.m._compile (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:69:33)
    at node:internal/modules/cjs/loader:1706:10
    at require.extensions..jsx.require.extensions..js (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:114:20)
    at require.extensions.<computed> (/private/var/folders/2f/fhj8w81d10q1v08fx7rdwzfc0000gn/T/ts-node-dev-hook-8437559676828008.js:71:20)
    at Object.nodeDevHook [as .ts] (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/ts-node-dev/lib/hook.js:63:13)
[ERROR] 12:52:36 TypeError: argument handler must be a function
[INFO] 12:52:41 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts has been modified
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
🔍 Events router hit: GET /api/events/cmcn3ivj6000aqxrjk7etn14o/photos params: [Object: null prototype] {}
📷 GET /:id/photos route hit! {
  params: [Object: null prototype] { id: 'cmcn3ivj6000aqxrjk7etn14o' }
}
📷 Get photos handler working!
[0mGET /api/events/cmcn3ivj6000aqxrjk7etn14o/photos [32m200[0m 4.549 ms - 101[0m
🔍 Events router hit: POST /api/events/cmcn3ivj6000aqxrjk7etn14o/photos params: [Object: null prototype] {}
📸 POST /:id/photos route hit! {
  params: [Object: null prototype] { id: 'cmcn3ivj6000aqxrjk7etn14o' },
  body: { caption: 'test' }
}
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at next (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:157:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts:41:5\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T09:52:57.160Z","url":"/api/events/cmcn3ivj6000aqxrjk7etn14o/photos","userAgent":"curl/8.7.1"}
[0mPOST /api/events/cmcn3ivj6000aqxrjk7etn14o/photos [33m401[0m 5.692 ms - 100[0m
[INFO] 12:53:15 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts has been modified

🛑 Received SIGTERM. Starting graceful shutdown...
✅ Database disconnected successfully
✅ Graceful shutdown completed
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
🔍 Events router hit: POST /api/events/cmcn3ivj6000aqxrjk7etn14o/photos params: [Object: null prototype] {}
📸 POST /:id/photos route hit! {
  params: [Object: null prototype] { id: 'cmcn3ivj6000aqxrjk7etn14o' },
  body: undefined
}
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at next (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:157:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts:41:5\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T09:53:30.698Z","url":"/api/events/cmcn3ivj6000aqxrjk7etn14o/photos","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mPOST /api/events/cmcn3ivj6000aqxrjk7etn14o/photos [33m401[0m 38.955 ms - 100[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1609.781 ms - -[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at next (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:117:3)\n    at handle (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:435:11)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T09:53:38.798Z","url":"/api/auth/me","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/auth/me [33m401[0m 26.734 ms - 100[0m
prisma:query SELECT "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt" FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."token" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query BEGIN
prisma:query DELETE FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."id" = $1 AND 1=1) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query INSERT INTO "public"."refresh_tokens" ("id","token","userId","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query COMMIT
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
[0mPOST /api/auth/refresh [32m200[0m 1185.090 ms - 905[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 504.450 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1023.621 ms - -[0m
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1613.213 ms - -[0m
prisma:query DELETE FROM "public"."refresh_tokens" WHERE "public"."refresh_tokens"."token" = $1
[0mPOST /api/auth/logout [32m200[0m 214.994 ms - 64[0m
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."googleId" = $1 OR "public"."users"."email" = $2) LIMIT $3 OFFSET $4
prisma:query UPDATE "public"."users" SET "googleId" = $1, "email" = $2, "name" = $3, "image" = $4, "emailVerified" = $5, "lastActive" = $6, "updatedAt" = $7 WHERE ("public"."users"."id" = $8 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query INSERT INTO "public"."refresh_tokens" ("id","token","userId","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query DELETE FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."userId" = $1 AND "public"."refresh_tokens"."expiresAt" < $2)
[0mPOST /api/auth/google/mobile [32m200[0m 1602.269 ms - 901[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 677.807 ms - -[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1065.558 ms - -[0m
🔍 Events router hit: GET /api/events/cmcn3ivj6000aqxrjk7etn14o params: [Object: null prototype] {}
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."comments"."id", "public"."comments"."text", "public"."comments"."sentiment", "public"."comments"."attachments", "public"."comments"."editHistory", "public"."comments"."mentions", "public"."comments"."reactionCounts", "public"."comments"."createdAt", "public"."comments"."updatedAt", "public"."comments"."userId", "public"."comments"."eventId" FROM "public"."comments" WHERE "public"."comments"."eventId" IN ($1) ORDER BY "public"."comments"."createdAt" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."event_photos"."id", "public"."event_photos"."imageUrl", "public"."event_photos"."caption", "public"."event_photos"."uploadedAt", "public"."event_photos"."storageKey", "public"."event_photos"."likeCount", "public"."event_photos"."eventId", "public"."event_photos"."userId" FROM "public"."event_photos" WHERE "public"."event_photos"."eventId" IN ($1) ORDER BY "public"."event_photos"."uploadedAt" DESC LIMIT $2 OFFSET $3
[0mGET /api/events/cmcn3ivj6000aqxrjk7etn14o [36m304[0m 1175.432 ms - -[0m
🔍 Events router hit: GET /api/events/cmcn3ivj6000aqxrjk7etn14o/photos params: [Object: null prototype] {}
📷 GET /:id/photos route hit! {
  params: [Object: null prototype] { id: 'cmcn3ivj6000aqxrjk7etn14o' }
}
📷 Get photos handler working!
[0mGET /api/events/cmcn3ivj6000aqxrjk7etn14o/photos [32m200[0m 4.157 ms - 101[0m
🔍 Events router hit: GET /api/events/cmcn3ivj6000aqxrjk7etn14o/attendees params: [Object: null prototype] {}
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" = $1 ORDER BY "public"."attendees"."createdAt" DESC OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
[0mGET /api/events/cmcn3ivj6000aqxrjk7etn14o/attendees [36m304[0m 300.451 ms - -[0m
🔍 Events router hit: POST /api/events/cmcn3ivj6000aqxrjk7etn14o/photos params: [Object: null prototype] {}
📸 POST /:id/photos route hit! {
  params: [Object: null prototype] { id: 'cmcn3ivj6000aqxrjk7etn14o' },
  body: undefined
}
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
error: Unknown error {"error":{"message":"Invalid Signature ece0b031657a0c8feb4612f97c7a3b49d0753ba4. String to sign - 'allowed_formats=jpg,jpeg,png&folder=meeton-event-photos&timestamp=1751536454&transformation=c_limit,h_1200,w_1200'.","name":"Error"},"ip":"::1","method":"POST","timestamp":"2025-07-03T09:54:15.798Z","url":"/api/events/cmcn3ivj6000aqxrjk7etn14o/photos","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0","userId":"cmcn2at8p0000qxrjeqebous6"}
[0mPOST /api/events/cmcn3ivj6000aqxrjk7etn14o/photos [31m500[0m 1885.345 ms - 281[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 685.018 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 802.874 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) OFFSET $11
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 689.990 ms - -[0m
🔍 Events router hit: GET /api/events/cmcn3ivj6000aqxrjk7etn14o params: [Object: null prototype] {}
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."comments"."id", "public"."comments"."text", "public"."comments"."sentiment", "public"."comments"."attachments", "public"."comments"."editHistory", "public"."comments"."mentions", "public"."comments"."reactionCounts", "public"."comments"."createdAt", "public"."comments"."updatedAt", "public"."comments"."userId", "public"."comments"."eventId" FROM "public"."comments" WHERE "public"."comments"."eventId" IN ($1) ORDER BY "public"."comments"."createdAt" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."event_photos"."id", "public"."event_photos"."imageUrl", "public"."event_photos"."caption", "public"."event_photos"."uploadedAt", "public"."event_photos"."storageKey", "public"."event_photos"."likeCount", "public"."event_photos"."eventId", "public"."event_photos"."userId" FROM "public"."event_photos" WHERE "public"."event_photos"."eventId" IN ($1) ORDER BY "public"."event_photos"."uploadedAt" DESC LIMIT $2 OFFSET $3
[0mGET /api/events/cmcn3ivj6000aqxrjk7etn14o [36m304[0m 592.693 ms - -[0m
[INFO] 12:59:42 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/friends.ts has been modified

🛑 Received SIGTERM. Starting graceful shutdown...
✅ Database disconnected successfully
✅ Graceful shutdown completed
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
[INFO] 13:19:09 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/routes/events.ts has been modified
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 679.839 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1713.434 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1732.685 ms - -[0m
🔍 Events router hit: GET /api/events/cmcn80hrh0004qx4nrg9ckv33 params: [Object: null prototype] {}
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."comments"."id", "public"."comments"."text", "public"."comments"."sentiment", "public"."comments"."attachments", "public"."comments"."editHistory", "public"."comments"."mentions", "public"."comments"."reactionCounts", "public"."comments"."createdAt", "public"."comments"."updatedAt", "public"."comments"."userId", "public"."comments"."eventId" FROM "public"."comments" WHERE "public"."comments"."eventId" IN ($1) ORDER BY "public"."comments"."createdAt" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."event_photos"."id", "public"."event_photos"."imageUrl", "public"."event_photos"."caption", "public"."event_photos"."uploadedAt", "public"."event_photos"."storageKey", "public"."event_photos"."likeCount", "public"."event_photos"."eventId", "public"."event_photos"."userId" FROM "public"."event_photos" WHERE "public"."event_photos"."eventId" IN ($1) ORDER BY "public"."event_photos"."uploadedAt" DESC LIMIT $2 OFFSET $3
[0mGET /api/events/cmcn80hrh0004qx4nrg9ckv33 [36m304[0m 1262.241 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."receiverId" = $2) OR ("public"."friend_requests"."senderId" = $3 AND "public"."friend_requests"."receiverId" = $4)) ORDER BY "public"."friend_requests"."createdAt" DESC LIMIT $5 OFFSET $6
[0mGET /api/friends/status/cmcn7zxtd0000qx4nlorwxosb [32m200[0m 622.189 ms - 89[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 503.328 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 799.894 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 941.891 ms - -[0m
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 407.946 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 1367.744 ms - -[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1606.581 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 1641.079 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 703.452 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 417.556 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 608.015 ms - -[0m
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 900.784 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 698.157 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 400.771 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 514.709 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 614.899 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 413.777 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 422.465 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 418.233 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."receiverId" = $2) OR ("public"."friend_requests"."senderId" = $3 AND "public"."friend_requests"."receiverId" = $4)) ORDER BY "public"."friend_requests"."createdAt" DESC LIMIT $5 OFFSET $6
[0mGET /api/friends/status/cmcn7zxtd0000qx4nlorwxosb [36m304[0m 406.839 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 495.523 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 330.401 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 486.672 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 904.346 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 422.471 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 427.334 ms - -[0m
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 475.368 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 957.578 ms - -[0m
prisma:query DELETE FROM "public"."refresh_tokens" WHERE "public"."refresh_tokens"."token" = $1
[0mPOST /api/auth/logout [32m200[0m 202.255 ms - 64[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."googleId" = $1 OR "public"."users"."email" = $2) LIMIT $3 OFFSET $4
prisma:query UPDATE "public"."users" SET "googleId" = $1, "email" = $2, "name" = $3, "image" = $4, "emailVerified" = $5, "lastActive" = $6, "updatedAt" = $7 WHERE ("public"."users"."id" = $8 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query INSERT INTO "public"."refresh_tokens" ("id","token","userId","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query DELETE FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."userId" = $1 AND "public"."refresh_tokens"."expiresAt" < $2)
[0mPOST /api/auth/google/mobile [32m200[0m 1291.625 ms - 901[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 516.633 ms - -[0m
[0mGET /api/events [36m304[0m 526.160 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 317.582 ms - -[0m
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 409.252 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [32m200[0m 510.564 ms - 324[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [32m200[0m 702.965 ms - 324[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 807.661 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 962.793 ms - -[0m
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 307.740 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 500.379 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 392.085 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 399.473 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [32m200[0m 306.288 ms - 452[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [32m200[0m 395.117 ms - 452[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 300.485 ms - -[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 403.847 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 407.507 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 311.324 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 402.118 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 311.268 ms - -[0m
[0mGET /api/events [33m429[0m 2.299 ms - 120[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."receiverId" = $2) OR ("public"."friend_requests"."senderId" = $3 AND "public"."friend_requests"."receiverId" = $4)) ORDER BY "public"."friend_requests"."createdAt" DESC LIMIT $5 OFFSET $6
[0mGET /api/friends/status/cmcn817wv0007qx4numyxvu4s [32m200[0m 314.918 ms - 93[0m
[0mPOST /api/friends/respond [33m429[0m 0.491 ms - 120[0m
[0mPOST /api/friends/respond [33m429[0m 0.309 ms - 120[0m
[0mPOST /api/friends/respond [33m429[0m 1.861 ms - 120[0m
[0mGET /api/events [33m429[0m 2.883 ms - 120[0m
[0mGET /api/friends/status/cmcn817wv0007qx4numyxvu4s [33m429[0m 1.633 ms - 120[0m
[0mGET /api/events [33m429[0m 1.246 ms - 120[0m
[0mGET /api/friends/status/cmcn817wv0007qx4numyxvu4s [33m429[0m 0.408 ms - 120[0m
[0mGET /api/events [33m429[0m 1.326 ms - 120[0m
[0mGET /api/friends/status/cmcn817wv0007qx4numyxvu4s [33m429[0m 0.410 ms - 120[0m
[0mGET /api/friends [33m429[0m 1.026 ms - 120[0m
[0mGET /api/friends/requests [33m429[0m 0.612 ms - 120[0m
[0mGET /api/events [33m429[0m 0.904 ms - 120[0m
[0mGET /api/friends [33m429[0m 2.191 ms - 120[0m
[0mGET /api/friends/requests [33m429[0m 0.523 ms - 120[0m
[0mGET /api/events [33m429[0m 0.821 ms - 120[0m
[0mGET /api/friends [33m429[0m 5.956 ms - 120[0m
[0mGET /api/friends/requests [33m429[0m 0.544 ms - 120[0m
[0mGET /api/events [33m429[0m 0.665 ms - 120[0m
[0mGET /api/auth/me [33m429[0m 1.066 ms - 120[0m
[0mGET /api/events [33m429[0m 0.717 ms - 120[0m
[0mGET /api/events [33m429[0m 0.273 ms - 120[0m
[0mGET /api/friends [33m429[0m 1.276 ms - 120[0m
[0mGET /api/friends/requests [33m429[0m 1.607 ms - 120[0m
[0mGET /api/events [33m429[0m 0.725 ms - 120[0m
[0mGET /api/friends [33m429[0m 3.724 ms - 120[0m
[0mGET /api/friends/requests [33m429[0m 0.830 ms - 120[0m
[0mGET /api/events [33m429[0m 0.684 ms - 120[0m
[INFO] 13:22:49 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/friendService.ts has been modified

🛑 Received SIGTERM. Starting graceful shutdown...
✅ Database disconnected successfully
✅ Graceful shutdown completed
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
[INFO] 13:23:38 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/controllers/friendController.ts has been modified
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
[INFO] 13:24:19 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/index.js has been modified
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
warn: Client error {"error":{"message":"Authorization header required","name":"AuthenticationError","stack":"AuthenticationError: Authorization header required\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:29:19\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T10:25:54.897Z","url":"/api/friends/respond","userAgent":"node-fetch"}
[0mPOST /api/friends/respond [33m401[0m 8.225 ms - 116[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T10:25:54.911Z","url":"/api/friends/respond","userAgent":"node-fetch"}
[0mPOST /api/friends/respond [33m401[0m 2.042 ms - 100[0m
warn: Client error {"error":{"message":"Authorization header required","name":"AuthenticationError","stack":"AuthenticationError: Authorization header required\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:29:19\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T10:25:54.914Z","url":"/api/friends/requests","userAgent":"node-fetch"}
[0mGET /api/friends/requests [33m401[0m 0.880 ms - 116[0m
[INFO] 13:26:21 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/friendService.ts has been modified

🛑 Received SIGTERM. Starting graceful shutdown...
✅ Database disconnected successfully
✅ Graceful shutdown completed
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
[INFO] 13:26:42 Restarting: /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/controllers/friendController.ts has been modified

🛑 Received SIGTERM. Starting graceful shutdown...
✅ Database disconnected successfully
✅ Graceful shutdown completed
✅ Environment variables validated successfully
📁 Events routes file loaded
🔍 eventController: EventController {
  createEvent: [Function: bound createEvent],
  getEvents: [Function: bound getEvents],
  getEventById: [Function: bound getEventById],
  updateEvent: [Function: bound updateEvent],
  deleteEvent: [Function: bound deleteEvent],
  rsvpToEvent: [Function: bound rsvpToEvent],
  removeAttendee: [Function: bound removeAttendee],
  getEventAttendees: [Function: bound getEventAttendees],
  getUserEvents: [Function: bound getUserEvents]
}
🔍 eventController.uploadEventPhoto: undefined
📋 Router has 11 routes defined
🔥 Routes imported: {
  authRoutes: true,
  userRoutes: true,
  eventRoutes: true,
  friendRoutes: true
}
[dotenv@17.0.0] injecting env (12) from .env – 🔐 encrypt with dotenvx: https://dotenvx.com
✅ Database connected successfully

🚀 MeetOn Backend Server Started
📍 Environment: development
🌐 Port: 3000
💾 Database: Connected
🔗 Health Check: http://localhost:3000/health
📚 API Documentation: http://localhost:3000/api
      
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 2757.076 ms - -[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T11:41:33.188Z","url":"/api/friends","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/friends [33m401[0m 66.856 ms - 100[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T11:41:33.236Z","url":"/api/friends/requests","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/friends/requests [33m401[0m 13.689 ms - 100[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1031.163 ms - -[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T11:41:34.305Z","url":"/api/friends","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/friends [33m401[0m 2.004 ms - 100[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T11:41:34.310Z","url":"/api/friends/requests","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/friends/requests [33m401[0m 1.596 ms - 100[0m
prisma:query SELECT "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt" FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."token" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt" FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."token" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt" FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."token" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt" FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."token" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query BEGIN
prisma:query BEGIN
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query BEGIN
prisma:query BEGIN
prisma:query DELETE FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."id" = $1 AND 1=1) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query INSERT INTO "public"."refresh_tokens" ("id","token","userId","expiresAt","createdAt") VALUES ($1,$2,$3,$4,$5) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query COMMIT
prisma:query DELETE FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."id" = $1 AND 1=1) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query DELETE FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."id" = $1 AND 1=1) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query DELETE FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."id" = $1 AND 1=1) RETURNING "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt"
prisma:query ROLLBACK
prisma:error 
Invalid `database_1.prisma.refreshToken.delete()` invocation in
/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54

  250 const newRefreshToken = this.generateRefreshToken();
  251 // Replace old refresh token with new one (token rotation)
  252 yield database_1.prisma.$transaction([
→ 253     database_1.prisma.refreshToken.delete(
An operation failed because it depends on one or more records that were required but not found. No record was found for a delete.
prisma:error An operation failed because it depends on one or more records that were required but not found. No record was found for a delete.
error: Unknown error {"error":{"message":"\nInvalid `database_1.prisma.refreshToken.delete()` invocation in\n/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54\n\n  250 const newRefreshToken = this.generateRefreshToken();\n  251 // Replace old refresh token with new one (token rotation)\n  252 yield database_1.prisma.$transaction([\n→ 253     database_1.prisma.refreshToken.delete(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a delete.","name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `database_1.prisma.refreshToken.delete()` invocation in\n/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54\n\n  250 const newRefreshToken = this.generateRefreshToken();\n  251 // Replace old refresh token with new one (token rotation)\n  252 yield database_1.prisma.$transaction([\n→ 253     database_1.prisma.refreshToken.delete(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a delete.\n    at Zn.handleRequestError (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:7459)\n    at Zn.handleAndLogRequestError (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:6784)\n    at Zn.request (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:6491)\n    at l (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:133:9778)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T11:41:35.315Z","url":"/api/auth/refresh","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mPOST /api/auth/refresh [31m500[0m 1976.681 ms - 591[0m
prisma:error 
Invalid `database_1.prisma.refreshToken.delete()` invocation in
/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54

  250 const newRefreshToken = this.generateRefreshToken();
  251 // Replace old refresh token with new one (token rotation)
  252 yield database_1.prisma.$transaction([
→ 253     database_1.prisma.refreshToken.delete(
An operation failed because it depends on one or more records that were required but not found. No record was found for a delete.
prisma:error An operation failed because it depends on one or more records that were required but not found. No record was found for a delete.
error: Unknown error {"error":{"message":"\nInvalid `database_1.prisma.refreshToken.delete()` invocation in\n/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54\n\n  250 const newRefreshToken = this.generateRefreshToken();\n  251 // Replace old refresh token with new one (token rotation)\n  252 yield database_1.prisma.$transaction([\n→ 253     database_1.prisma.refreshToken.delete(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a delete.","name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `database_1.prisma.refreshToken.delete()` invocation in\n/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54\n\n  250 const newRefreshToken = this.generateRefreshToken();\n  251 // Replace old refresh token with new one (token rotation)\n  252 yield database_1.prisma.$transaction([\n→ 253     database_1.prisma.refreshToken.delete(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a delete.\n    at Zn.handleRequestError (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:7459)\n    at Zn.handleAndLogRequestError (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:6784)\n    at Zn.request (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:6491)\n    at l (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:133:9778)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T11:41:35.320Z","url":"/api/auth/refresh","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mPOST /api/auth/refresh [31m500[0m 996.221 ms - 591[0m
prisma:error 
Invalid `database_1.prisma.refreshToken.delete()` invocation in
/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54

  250 const newRefreshToken = this.generateRefreshToken();
  251 // Replace old refresh token with new one (token rotation)
  252 yield database_1.prisma.$transaction([
→ 253     database_1.prisma.refreshToken.delete(
An operation failed because it depends on one or more records that were required but not found. No record was found for a delete.
prisma:error An operation failed because it depends on one or more records that were required but not found. No record was found for a delete.
error: Unknown error {"error":{"message":"\nInvalid `database_1.prisma.refreshToken.delete()` invocation in\n/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54\n\n  250 const newRefreshToken = this.generateRefreshToken();\n  251 // Replace old refresh token with new one (token rotation)\n  252 yield database_1.prisma.$transaction([\n→ 253     database_1.prisma.refreshToken.delete(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a delete.","name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `database_1.prisma.refreshToken.delete()` invocation in\n/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:253:54\n\n  250 const newRefreshToken = this.generateRefreshToken();\n  251 // Replace old refresh token with new one (token rotation)\n  252 yield database_1.prisma.$transaction([\n→ 253     database_1.prisma.refreshToken.delete(\nAn operation failed because it depends on one or more records that were required but not found. No record was found for a delete.\n    at Zn.handleRequestError (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:7459)\n    at Zn.handleAndLogRequestError (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:6784)\n    at Zn.request (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:124:6491)\n    at l (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/generated/prisma/runtime/library.js:133:9778)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T11:41:35.324Z","url":"/api/auth/refresh","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mPOST /api/auth/refresh [31m500[0m 996.303 ms - 591[0m
prisma:query ROLLBACK
prisma:query ROLLBACK
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at next (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:117:3)\n    at handle (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:435:11)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T11:41:35.335Z","url":"/api/auth/me","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/auth/me [33m401[0m 1.635 ms - 100[0m
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
[0mPOST /api/auth/refresh [32m200[0m 2112.514 ms - 897[0m
prisma:query SELECT "public"."refresh_tokens"."id", "public"."refresh_tokens"."token", "public"."refresh_tokens"."userId", "public"."refresh_tokens"."expiresAt", "public"."refresh_tokens"."createdAt" FROM "public"."refresh_tokens" WHERE ("public"."refresh_tokens"."token" = $1 AND 1=1) LIMIT $2 OFFSET $3
warn: Client error {"error":{"message":"Refresh token not found","name":"AuthenticationError","stack":"AuthenticationError: Refresh token not found\n    at AuthService.<anonymous> (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:238:23)\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/services/authService.js:5:58)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T11:41:35.449Z","url":"/api/auth/refresh","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mPOST /api/auth/refresh [33m401[0m 104.911 ms - 110[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T11:41:35.461Z","url":"/api/friends","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/friends [33m401[0m 1.305 ms - 100[0m
warn: Client error {"error":{"message":"Invalid token","name":"AuthenticationError","stack":"AuthenticationError: Invalid token\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:70:18\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:4:12)\n    at authenticate (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/auth.js:24:42)\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at trimPrefix (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:342:13)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:297:9\n    at processParams (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:582:12)"},"ip":"::1","method":"GET","timestamp":"2025-07-03T11:41:35.463Z","url":"/api/friends/requests","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0"}
[0mGET /api/friends/requests [33m401[0m 1.330 ms - 100[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
[0mPOST /api/auth/refresh [33m429[0m 0.467 ms - 141[0m
[0mPOST /api/auth/refresh [33m429[0m 0.507 ms - 141[0m
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 617.517 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 809.341 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 507.135 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 616.875 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 418.831 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 423.159 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 526.282 ms - -[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 821.342 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 514.739 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 421.593 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 610.348 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 414.769 ms - -[0m
🔍 Events router hit: GET /api/events/cmcn80hrh0004qx4nrg9ckv33 params: [Object: null prototype] {}
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
prisma:query SELECT "public"."comments"."id", "public"."comments"."text", "public"."comments"."sentiment", "public"."comments"."attachments", "public"."comments"."editHistory", "public"."comments"."mentions", "public"."comments"."reactionCounts", "public"."comments"."createdAt", "public"."comments"."updatedAt", "public"."comments"."userId", "public"."comments"."eventId" FROM "public"."comments" WHERE "public"."comments"."eventId" IN ($1) ORDER BY "public"."comments"."createdAt" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."event_photos"."id", "public"."event_photos"."imageUrl", "public"."event_photos"."caption", "public"."event_photos"."uploadedAt", "public"."event_photos"."storageKey", "public"."event_photos"."likeCount", "public"."event_photos"."eventId", "public"."event_photos"."userId" FROM "public"."event_photos" WHERE "public"."event_photos"."eventId" IN ($1) ORDER BY "public"."event_photos"."uploadedAt" DESC LIMIT $2 OFFSET $3
[0mGET /api/events/cmcn80hrh0004qx4nrg9ckv33 [36m304[0m 1226.100 ms - -[0m
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."receiverId" = $2) OR ("public"."friend_requests"."senderId" = $3 AND "public"."friend_requests"."receiverId" = $4)) ORDER BY "public"."friend_requests"."createdAt" DESC LIMIT $5 OFFSET $6
[0mGET /api/friends/status/cmcn817wv0007qx4numyxvu4s [36m304[0m 521.576 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
warn: Client error {"error":{"message":"Validation failed","name":"ValidationError","stack":"ValidationError: Validation failed\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:43:22\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:4:12)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:20:32\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at next (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:117:3)\n    at handle (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:435:11)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T11:41:51.951Z","url":"/api/friends/respond","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0","userId":"cmcn7zxtd0000qx4nlorwxosb"}
[0mPOST /api/friends/respond [33m400[0m 219.936 ms - 174[0m
prisma:query SELECT 1
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 412.472 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 548.672 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 561.285 ms - -[0m
🔍 Events router hit: GET /api/events/cmcn80hrh0004qx4nrg9ckv33 params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2) OFFSET $3
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."comments"."id", "public"."comments"."text", "public"."comments"."sentiment", "public"."comments"."attachments", "public"."comments"."editHistory", "public"."comments"."mentions", "public"."comments"."reactionCounts", "public"."comments"."createdAt", "public"."comments"."updatedAt", "public"."comments"."userId", "public"."comments"."eventId" FROM "public"."comments" WHERE "public"."comments"."eventId" IN ($1) ORDER BY "public"."comments"."createdAt" DESC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."event_photos"."id", "public"."event_photos"."imageUrl", "public"."event_photos"."caption", "public"."event_photos"."uploadedAt", "public"."event_photos"."storageKey", "public"."event_photos"."likeCount", "public"."event_photos"."eventId", "public"."event_photos"."userId" FROM "public"."event_photos" WHERE "public"."event_photos"."eventId" IN ($1) ORDER BY "public"."event_photos"."uploadedAt" DESC LIMIT $2 OFFSET $3
[0mGET /api/events/cmcn80hrh0004qx4nrg9ckv33 [36m304[0m 1481.715 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 408.848 ms - -[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
[0mGET /api/events [36m304[0m 1107.378 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 1329.154 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
[0mGET /api/friends/requests [36m304[0m 1358.483 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 733.193 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 1856.460 ms - -[0m
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 746.720 ms - -[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 1801.350 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 412.907 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 606.951 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 619.755 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 323.266 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 316.156 ms - -[0m
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 422.372 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
[0mGET /api/friends/requests [36m304[0m 429.330 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE ("public"."friend_requests"."receiverId" = $1 AND "public"."friend_requests"."status" = CAST($2::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."createdAt" DESC OFFSET $3
[0mGET /api/friends [36m304[0m 326.727 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."username", "public"."users"."name", "public"."users"."image", "public"."users"."bio" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2
[0mGET /api/friends/requests [36m304[0m 428.093 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
[0mGET /api/auth/me [36m304[0m 427.030 ms - -[0m
🔍 Events router hit: GET /api/events params: [Object: null prototype] {}
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."events"."id" FROM "public"."events" WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) OFFSET $2) AS "sub"
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."events"."id", "public"."events"."name", "public"."events"."date", "public"."events"."time", "public"."events"."location", "public"."events"."lat", "public"."events"."lng", "public"."events"."image", "public"."events"."description", "public"."events"."duration", "public"."events"."capacity", "public"."events"."rsvpDeadline", "public"."events"."headerType", "public"."events"."headerColor", "public"."events"."headerImageUrl", "public"."events"."isArchived", "public"."events"."archivedAt", "public"."events"."cancelledAt", "public"."events"."category", "public"."events"."tags", "public"."events"."privacyLevel"::text, "public"."events"."viewCount", "public"."events"."shareCount", "public"."events"."ticketPrice", "public"."events"."externalUrl", "public"."events"."weather", "public"."events"."locationDetails", "public"."events"."parentEventId", "public"."events"."createdAt", "public"."events"."updatedAt", "public"."events"."hostId", COALESCE("aggr_selection_0_Attendee"."_aggr_count_attendees", 0) AS "_aggr_count_attendees", COALESCE("aggr_selection_1_Comment"."_aggr_count_comments", 0) AS "_aggr_count_comments", COALESCE("aggr_selection_2_EventPhoto"."_aggr_count_photos", 0) AS "_aggr_count_photos" FROM "public"."events" LEFT JOIN (SELECT "public"."attendees"."eventId", COUNT(*) AS "_aggr_count_attendees" FROM "public"."attendees" WHERE 1=1 GROUP BY "public"."attendees"."eventId") AS "aggr_selection_0_Attendee" ON ("public"."events"."id" = "aggr_selection_0_Attendee"."eventId") LEFT JOIN (SELECT "public"."comments"."eventId", COUNT(*) AS "_aggr_count_comments" FROM "public"."comments" WHERE 1=1 GROUP BY "public"."comments"."eventId") AS "aggr_selection_1_Comment" ON ("public"."events"."id" = "aggr_selection_1_Comment"."eventId") LEFT JOIN (SELECT "public"."event_photos"."eventId", COUNT(*) AS "_aggr_count_photos" FROM "public"."event_photos" WHERE 1=1 GROUP BY "public"."event_photos"."eventId") AS "aggr_selection_2_EventPhoto" ON ("public"."events"."id" = "aggr_selection_2_EventPhoto"."eventId") WHERE ("public"."events"."isArchived" = $1 AND "public"."events"."cancelledAt" IS NULL) ORDER BY "public"."events"."date" ASC LIMIT $2 OFFSET $3
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 AND "public"."friend_requests"."receiverId" = $2) OR ("public"."friend_requests"."senderId" = $3 AND "public"."friend_requests"."receiverId" = $4)) ORDER BY "public"."friend_requests"."createdAt" DESC LIMIT $5 OFFSET $6
[0mGET /api/friends/status/cmcn817wv0007qx4numyxvu4s [36m304[0m 469.116 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."attendees"."id", "public"."attendees"."rsvp"::text, "public"."attendees"."responseTime", "public"."attendees"."inviteMethod", "public"."attendees"."checkedIn", "public"."attendees"."checkinTime", "public"."attendees"."inviteOpenedAt", "public"."attendees"."inviteOpenCount", "public"."attendees"."lastNotifiedAt", "public"."attendees"."createdAt", "public"."attendees"."updatedAt", "public"."attendees"."userId", "public"."attendees"."eventId" FROM "public"."attendees" WHERE "public"."attendees"."eventId" IN ($1,$2,$3,$4,$5,$6) OFFSET $7
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."username", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1,$2,$3,$4,$5,$6,$7) OFFSET $8
[0mGET /api/events [36m304[0m 986.276 ms - -[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
warn: Client error {"error":{"message":"Validation failed","name":"ValidationError","stack":"ValidationError: Validation failed\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:43:22\n    at Generator.next (<anonymous>)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (/Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:4:12)\n    at /Users/abuzaid/Desktop/MeetOn/meeton-backend/src/middleware/validation.js:20:32\n    at Layer.handleRequest (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/layer.js:152:17)\n    at next (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/lib/route.js:117:3)\n    at handle (/Users/abuzaid/Desktop/MeetOn/meeton-backend/node_modules/router/index.js:435:11)"},"ip":"::1","method":"POST","timestamp":"2025-07-03T11:42:59.209Z","url":"/api/friends/respond","userAgent":"MeetOn/1 CFNetwork/3826.400.120 Darwin/24.3.0","userId":"cmcn7zxtd0000qx4nlorwxosb"}
[0mPOST /api/friends/respond [33m400[0m 215.430 ms - 174[0m
[0mGET /api/friends/requests [33m429[0m 0.634 ms - 120[0m
[0mGET /api/events [33m429[0m 0.446 ms - 120[0m
prisma:query SELECT "public"."users"."id", "public"."users"."email", "public"."users"."username", "public"."users"."name", "public"."users"."lastActive" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query UPDATE "public"."users" SET "lastActive" = $1, "updatedAt" = $2 WHERE ("public"."users"."id" = $3 AND 1=1) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."emailVerified", "public"."users"."image", "public"."users"."username", "public"."users"."bio", "public"."users"."dateOfBirth", "public"."users"."gender", "public"."users"."location", "public"."users"."interests", "public"."users"."language", "public"."users"."timezone", "public"."users"."lastActive", "public"."users"."onboardingCompleted", "public"."users"."passwordHash", "public"."users"."emailVerificationToken", "public"."users"."resetPasswordToken", "public"."users"."resetPasswordExpires", "public"."users"."googleId", "public"."users"."appleId", "public"."users"."profileVisibility"::text, "public"."users"."allowFriendRequests", "public"."users"."showOnlineStatus", "public"."users"."pushNotifications", "public"."users"."emailNotifications", "public"."users"."smsNotifications", "public"."users"."createdAt", "public"."users"."updatedAt"
prisma:query SELECT "public"."friend_requests"."id", "public"."friend_requests"."status"::text, "public"."friend_requests"."responseTime", "public"."friend_requests"."seenAt", "public"."friend_requests"."declineReason", "public"."friend_requests"."createdAt", "public"."friend_requests"."updatedAt", "public"."friend_requests"."senderId", "public"."friend_requests"."receiverId" FROM "public"."friend_requests" WHERE (("public"."friend_requests"."senderId" = $1 OR "public"."friend_requests"."receiverId" = $2) AND "public"."friend_requests"."status" = CAST($3::text AS "public"."FriendRequestStatus")) ORDER BY "public"."friend_requests"."updatedAt" DESC LIMIT $4 OFFSET $5
[0mGET /api/friends [36m304[0m 320.813 ms - -[0m
